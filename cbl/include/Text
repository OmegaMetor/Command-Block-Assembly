type Text {

    _IRType _text;

    constexpr constructor(): _text("text") {}

    constexpr Text operator +=(int val) {
        ir(this._text, val) {
            text_append $arg0, $arg1
        }
        return this;
    }

    constexpr void append_ref(int &ref) {
        ir(this._text, ref) {
            text_append $arg0, $arg1
        }
    }

    constexpr Text operator <<(int val) {
        ir(this._text, val) {
            text_append $arg0, $arg1
        }
        return this;
    }

    Text operator +=(string str);
    Text operator <<(string str);

    macro void send_to_all() {
        _IRType all_players("selector a");
        ir(this._text, all_players) {
            text_send $arg0, $arg1
        }
    }

}

intrinsic_extension {

    Text Text::operator <<(string str) Python: {
        with compiletime:
            m = this.get_member(compiler, '_text')
            compiler.add_insn(i.TextAppend(m.value.var, i.VirtualString(args.str.value)))
            return thisarg
    }

    Text Text::operator +=(string str) Python: {
        with compiletime:
            m = this.get_member(compiler, '_text')
            compiler.add_insn(i.TextAppend(m.value.var, i.VirtualString(args.str.value)))
            return thisarg
    }
}
