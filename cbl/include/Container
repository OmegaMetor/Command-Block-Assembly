type Container {

    _IRType _pos;

    macro constructor(_IRType pos): _pos(pos) {}

    constexpr _IRType _exec_if_var(_IRType &var) {
        _IRType exec("execute");
        ir (exec, var) {
            exec_if_nbt_var $arg0, $arg1
        }
        return exec;
    }

    constexpr string create_path_constraint(ItemType item) {
        NBTCompound itemName;
        itemName["id"] = NBTString(item.name());
        return "Items[" + itemName.to_string() + "].Count";
    }

    macro int get_item_count(ItemType item) {
        // Create an NBT list containing the counts of all items matching the constraint
        NBT<NBTList> item_counts;
        ir(item_counts.var, this._pos, this.create_path_constraint(item)) {
            nbt_modify_var_from $arg0, append, $arg1, $arg2
        }
        // Sum the values in item_counts
        int count = 0;
        NBTSubvar head = item_counts["[0]"];
        _IRType exec2 = this._exec_if_var(head.asInt());
        ir (exec2, count, head.asInt()) {
            call :loop
            branch :cont

            [function] loop:
            exec_run $arg0, :count

            [function] count:
            $arg1 += $arg2
            nbt_remove $arg2
            branch :loop

            cont:
        }
        return count;
    }

}
