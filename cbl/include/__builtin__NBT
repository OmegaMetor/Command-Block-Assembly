type NBTBase {
    _IRType _nbt;
    constexpr constructor(string insn): _nbt(insn) {}
    constexpr constructor(string insn, string arg1, string arg2): _nbt(insn, arg1, arg2) {}

    constexpr string to_string() {
        _IRType str("mut_string NULL");
        ir (str, this._nbt) {
            nbt_serialize $arg0, $arg1
        }
        return str;
    }
}

type NBTString : NBTBase {
    constexpr constructor(string value): NBTBase("nbt_val", "string", value) {}
}

type NBTInt : NBTBase {
    constexpr constructor(): NBTBase("nbt_val int, 0") {}
}

type NBTList : NBTBase {
    constexpr constructor(): NBTBase("nbt_list NULL") {}

    constexpr void append(NBTBase value) {
        ir (this._nbt, value._nbt) {
            nbt_list_append $arg0, $arg1
        }
    }
}

type NBTCompoundKey {
    _IRType _nbt;
    string _key;

    constexpr constructor(_IRType nbt, string key): _nbt(nbt), _key(key) {}

    constexpr void operator =(NBTBase value) {
        ir (this._nbt, this._key, value._nbt) {
            nbt_compound_set $arg0, $arg1, $arg2
        }
    }
}

type NBTCompound : NBTBase {
    constexpr constructor(): NBTBase("nbt_compound") {}

    constexpr NBTCompoundKey operator [](string key) {
        return NBTCompoundKey(this._nbt, key);
    }
}

type NBTSubvar {
    _NBT root;
    string path;
    macro constructor(_NBT &root, string path): root(root), path(path) {}

    macro _IRType asInt() {
        return _IRType("nbtsubpath", this.root, this.path, "i32");
    }
}

type NBT<T> {
    _NBT var;
    constructor() {
        T defaultValue;
        ir (this.var, defaultValue._nbt) {
            nbt_assign $arg0, $arg1
        }
    }

    macro NBTSubvar operator [](string path) {
        return NBTSubvar(this.var, path);
    }

}
