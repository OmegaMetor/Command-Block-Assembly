singleton Game {
    EntityCollection entities;
    async void tick();
}

intrinsic_extension {

    reconfigure_type Game Python: {
        entities = the_type.metatype.instance['entities']
        insn = i.CreateSelector(i.SelectorType.ALL_ENTITIES)
        all_entities = compiler.global_def('all_entities', insn)
        entities.value.selector = all_entities
    }

    async void Game::tick() Python: {
        assert not args
        cb = compiler.func.create_block('yield_tick')
        compiler.add_insn(i.SetCommandBlock(cb))
        cb.add(i.ClearCommandBlock())
        from .containers import AsyncReturn, FuncCallRet
        return AsyncReturn(FuncCallRet(compiler.type('void'), None, _instance), cb)
    }
}
