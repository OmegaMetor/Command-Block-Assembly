type vec3<T> {
    T x;
    T y;
    T z;

    constructor(T x, T y, T z);

    vec3<T> operator *(T scalar);
}

type vec3i is vec3<int>;
type vec3d: vec3<decimal> {
    constructor(decimal x, decimal y, decimal z);
    vec3i to_int();
}

type EntityPos {
    __EntityPtr _ptr;

    constructor(__EntityPtr ptr);
    property EntityPosComponent x();
    property EntityPosComponent y();
    property EntityPosComponent z();
    vec3d as_vec();
}

intrinsic_extension {

    EntityPos::constructor(__EntityPtr ptr) Python: {
        this.get_member(compiler, '_ptr').value.ctor_from(args.ptr.value)
        return void
    }

}

type World {
    __EntityPtr _ptr;

    constructor(__EntityPtr ptr);
    void spawn(EntityType type, vec3i pos);
}

intrinsic_extension {

    World::constructor(__EntityPtr ptr) Python: {
        this.get_member(compiler, '_ptr').value.ctor_from(args.ptr.value)
        return void
    }

    void World::spawn(EntityType type, vec3i pos) Python: {
        ptr = this.get_member(compiler, '_ptr').value
        entity_id = i.VirtualString(args.type.value.name)
        block = ptr.at_entity()
        vec = [comp.type.as_variable(comp.value) for comp in [
                args.pos.type.get_property(compiler, args.pos, c) for c in 'xyz']]
        # TODO non-constant positions
        pos = compiler.insn_def(i.CreatePosition(*vec))
        block.add(i.SpawnEntityInsn(entity_id, pos, None))
        return void
    }

}

type SelectorFilter {
}

type RuntimeEntityType {
    __EntityPtr _ptr;

    SelectorFilter operator==(EntityType other);
    constructor(__EntityPtr ptr);
}

intrinsic_extension {

    RuntimeEntityType::constructor(__EntityPtr ptr) Python: {
        this.get_member(compiler, '_ptr').value.ctor_from(args.ptr.value)
        return void
    }

}

type Entity {

    __EntityPtr _ptr;

    constructor(__EntityPtr ptr);

    property EntityPos pos();
    property World world();
    property RuntimeEntityType type();
//    property EntityFacing facing();

    Entity operator =(Entity other);
    void kill();
    SelectorFilter has_tag(string tag);
//    void joinTeam(Team team);
}

intrinsic_extension {

    Entity::constructor(__EntityPtr ptr) Python: {
        this.get_member(compiler, '_ptr').value.ctor_from(args.ptr.value)
        return void
    }

    EntityPos Entity::pos() Python: {
        ptr = this.get_member(compiler, '_ptr')
        t = compiler.type('EntityPos')
        return compiler._construct_tmp('pos', t, (ptr,))
    }

    RuntimeEntityType Entity::type() Python: {
        ptr = this.get_member(compiler, '_ptr')
        t = compiler.type('RuntimeEntityType')
        return compiler._construct_tmp('type', t, (ptr,))
    }

    RuntimeEntityType Entity::world() Python: {
        ptr = this.get_member(compiler, '_ptr')
        t = compiler.type('World')
        return compiler._construct_tmp('world', t, (ptr,))
    }

    EntityPosComponent EntityPos::x() Python: {
        from .entity_support import PositionComponent
        from .containers import Temporary
        ptr = this.get_member(compiler, '_ptr').value
        t = compiler.type('EntityPosComponent')
        v = PositionComponent(compiler, ptr, 0)
        return Temporary(t, v)
    }

    EntityPosComponent EntityPos::y() Python: {
        from .entity_support import PositionComponent
        from .containers import Temporary
        ptr = this.get_member(compiler, '_ptr').value
        t = compiler.type('EntityPosComponent')
        v = PositionComponent(compiler, ptr, 1)
        return Temporary(t, v)
    }

    EntityPosComponent EntityPos::z() Python: {
        from .entity_support import PositionComponent
        from .containers import Temporary
        ptr = this.get_member(compiler, '_ptr').value
        t = compiler.type('EntityPosComponent')
        v = PositionComponent(compiler, ptr, 2)
        return Temporary(t, v)
    }

}

type EntityCollection {
    Entity first();
    EntityCollection sortNearest();
}

intrinsic_extension {

    Entity EntityCollection::first() Python: {
        from .entity_support import EntityCollection
        from .containers import Temporary
        t = compiler.type('EntityCollection')
        copy = compiler._construct_tmp('sorted', t, (Temporary(t, this),))
        new_col = copy.value
        compiler.add_insn(i.SetSelector(new_col.selector, 'limit', i.VirtualString('1')))
        assert new_col.boolvar is None, "TODO"
        exec = compiler.insn_def(i.CreateExec())
        compiler.add_insn(i.ExecAsEntity(exec, new_col.selector))
        body = compiler.create_block('first')
        body.set_is_function()

        old_block = compiler.block
        compiler.block = body
        ptr = compiler.entity_support.construct_sender()
        compiler.block = old_block

        compiler.add_insn(i.ExecRun(exec, body))
        return compiler._construct_tmp('first', compiler.type('Entity'), (ptr,))
    }

    EntityCollection EntityCollection::sortNearest() Python: {
        from .containers import Temporary
        t = compiler.type('EntityCollection')
        copy = compiler._construct_tmp('sorted', t, (Temporary(t, this),))
        compiler.add_insn(i.SetSelector(copy.value.selector, 'sort', i.VirtualString('nearest')))
        return copy
    }

}

intrinsic_extension {

    SelectorFilter RuntimeEntityType::operator==(EntityType other) Python: {
        from .entity_support import EntityFilterExpression
        ptr = this.get_member(compiler, '_ptr').value
        res = EntityFilterExpression(ptr, 'type', args.other.value.name)
        from .containers import Temporary
        return Temporary(compiler.type('SelectorFilter'), res)
    }

    SelectorFilter Entity::has_tag(string tag) Python: {
        return this.get_member(compiler, '_ptr').value.has_tag_filter(compiler, args.tag.value)
    }

    void Entity::kill() Python: {
        ptr = compiler.entity_support.get_pointer(thisarg)
        block, sender = ptr.as_entity()
        block.add(i.KillInsn(sender))
        return void
    }

    Entity Entity::operator =(Entity other) Python: {
        compiler.add_insn(i.SetScore(this._var, args.other.value._var))
        return args.other
    }

}

inline vec3d EntityPos::as_vec() {
    return vec3d(this.x.decval, this.y.decval, this.z.decval);
}

vec3d::constructor(decimal x, decimal y, decimal z): vec3<decimal>(x, y, z) {}

inline vec3i vec3d::to_int() {
    return vec3i(this.x, this.y, this.z);
}

generic<vec3>
vec3<T>::constructor(T x, T y, T z): x(x), y(y), z(z) {}

generic<vec3>
inline vec3<T> vec3<T>::operator*(T scalar) {
    return vec3(T)(this.x * scalar, this.y * scalar, this.z * scalar);
}


singleton Util {
    Entity pos_util;
}

intrinsic_extension {
    reconfigure_type Util Python: {
        pos_util = the_type.metatype.instance['pos_util']
        ptr = compiler.entity_support.get_pointer(pos_util)
        ptr.set_fixed_var(compiler.top.lookup('pos_util'))
    }
}
