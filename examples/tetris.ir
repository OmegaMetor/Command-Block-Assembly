preamble {
    $height = global i32, internal, NULL
    $width = global i32, internal, NULL
    $shape_id = global i32, internal, NULL
    $color = global i32, internal, NULL

    $row = global i32, internal, NULL
    $offset = global i32, internal, NULL
    $rotation = global i32, internal, NULL
    
    $mode = global i32, internal, NULL
    $can_fit = global i32, internal, NULL
    
    $random = global i32, internal, NULL
    
    setupfn @setup0
    
    $startpos = position 202, 56, -33
    $leverpos = position 206, 57, -9
    $rotatepos = position 206, 57, -11
    $leftpos = position 204, 57, -9
    $rightpos = position 208, 57, -9

    $rel0 = rel_pos 0
    $rel1 = rel_pos 1
}

function setup0 {

    entry:
    $random = 1337
    ret
}

function display_seek {

    preamble {
        $tmp0 = define i32
        $row1 = parameter i32, byval
        $col1 = parameter i32, byval
    }

    entry:
    teleport $pos_util, $startpos
    branch :whilerow

    whilerow:
    $tmp0 = $row1
    $row1 -= 1
    rangebr $tmp0, 0, 0, :whilecol, :moverow
    
    whilecol:
    $tmp0 = $col1
    $col1 -= 1
    rangebr $tmp0, 0, 0, :end, :movecol

    moverow:
    $e = execute
    exec_at_entity $e, $pos_util
    exec_run $e, :tp0
    branch :whilerow

    movecol:
    $e2 = execute
    exec_at_entity $e2, $pos_util
    exec_run $e2, :tp1
    branch :whilecol
    
    [function] tp0:
    $p0 = position $rel0, $rel0, $rel1
    teleport $pos_util, $p0

    [function] tp1:
    $p1 = position $rel1, $rel0, $rel0
    teleport $pos_util, $p1
    
    end:
    ret

}

function set1 {

    preamble {
        $p0 = position $rel0, $rel0, $rel0
    }

    entry:
    rangebr $mode, 1, 1, :set_can_fit, :do_set0

    set_can_fit:
    rangebr $can_fit, 0, 0, :end, :do_can_fit

    do_can_fit:
    $e0 = execute
    exec_at_entity $e0, $pos_util
    $spec = exec_store_var $can_fit
    exec_store $e0, success, $spec
    $pos0 = position $rel0, $rel0, $rel0
    $black = block "black_wool"
    exec_if_block $e0, $pos0, $black
    exec_finish $e0
    branch :end
    
    do_set0:
    rangebr $color, 0, 0, :set_white, :do_set1
    do_set1:
    rangebr $color, 1, 1, :set_orange, :do_set2
    do_set2:
    rangebr $color, 2, 2, :set_magenta, :do_set3
    do_set3:
    rangebr $color, 3, 3, :set_light_blue, :do_set4
    do_set4:
    rangebr $color, 4, 4, :set_yellow, :do_set5
    do_set5:
    rangebr $color, 5, 5, :set_lime, :do_set6
    do_set6:
    rangebr $color, 6, 6, :set_pink, :do_set7
    do_set7:
    rangebr $color, 7, 7, :set_grey, :do_set8
    do_set8:
    rangebr $color, 8, 8, :set_light_grey, :do_set9
    do_set9:
    rangebr $color, 9, 9, :set_cyan, :do_set10
    do_set10:
    rangebr $color, 10, 10, :set_purple, :do_set11
    do_set11:
    rangebr $color, 11, 11, :set_blue, :do_set12
    do_set12:
    rangebr $color, 12, 12, :set_brown, :do_set13
    do_set13:
    rangebr $color, 13, 13, :set_green, :do_set14
    do_set14:
    rangebr $color, 14, 14, :set_red, :do_set15
    do_set15:
    rangebr $color, 15, 15, :set_black, :end
    
    set_white:
    $e1 = execute
    exec_at_entity $e1, $pos_util
    exec_run $e1, :set_white0
    branch :end
    
    [function] set_white0:
    $block0 = block "white_wool"
    setblock $p0, $block0
    
    set_orange:
    $e2 = execute
    exec_at_entity $e2, $pos_util
    exec_run $e2, :set_orange0
    branch :end

    [function] set_orange0:
    $block1 = block "orange_wool"
    setblock $p0, $block1
    
    set_magenta:
    $e3 = execute
    exec_at_entity $e3, $pos_util
    exec_run $e3, :set_magenta0
    branch :end

    [function] set_magenta0:
    $block2 = block "magenta_wool"
    setblock $p0, $block2
    
    set_light_blue:
    $e4 = execute
    exec_at_entity $e4, $pos_util
    exec_run $e4, :set_light_blue0
    branch :end

    [function] set_light_blue0:
    $block3 = block "light_blue_wool"
    setblock $p0, $block3
    
    set_yellow:
    $e5 = execute
    exec_at_entity $e5, $pos_util
    exec_run $e5, :set_yellow0
    branch :end

    [function] set_yellow0:
    $block4 = block "yellow_wool"
    setblock $p0, $block4
    
    set_lime:
    $e6 = execute
    exec_at_entity $e6, $pos_util
    exec_run $e6, :set_lime0
    branch :end

    [function] set_lime0:
    $block5 = block "lime_wool"
    setblock $p0, $block5
    
    set_pink:
    $e7 = execute
    exec_at_entity $e7, $pos_util
    exec_run $e7, :set_pink0
    branch :end

    [function] set_pink0:
    $block6 = block "pink_wool"
    setblock $p0, $block6
    
    set_grey:
    $e8 = execute
    exec_at_entity $e8, $pos_util
    exec_run $e8, :set_grey0
    branch :end

    [function] set_grey0:
    $block7 = block "gray_wool"
    setblock $p0, $block7
    
    set_light_grey:
    $e9 = execute
    exec_at_entity $e9, $pos_util
    exec_run $e9, :set_light_grey0
    branch :end

    [function] set_light_grey0:
    $block8 = block "light_gray_wool"
    setblock $p0, $block8
    
    set_cyan:
    $e10 = execute
    exec_at_entity $e10, $pos_util
    exec_run $e10, :set_cyan0
    branch :end

    [function] set_cyan0:
    $block9 = block "cyan_wool"
    setblock $p0, $block9
    
    set_purple:
    $e11 = execute
    exec_at_entity $e11, $pos_util
    exec_run $e11, :set_purple0
    branch :end

    [function] set_purple0:
    $block10 = block "purple_wool"
    setblock $p0, $block10
    
    set_blue:
    $e12 = execute
    exec_at_entity $e12, $pos_util
    exec_run $e12, :set_blue0
    branch :end

    [function] set_blue0:
    $block11 = block "blue_wool"
    setblock $p0, $block11
    
    set_brown:
    $e13 = execute
    exec_at_entity $e13, $pos_util
    exec_run $e13, :set_brown0
    branch :end

    [function] set_brown0:
    $block12 = block "brown_wool"
    setblock $p0, $block12
    
    set_green:
    $e14 = execute
    exec_at_entity $e14, $pos_util
    exec_run $e14, :set_green0
    branch :end

    [function] set_green0:
    $block13 = block "green_wool"
    setblock $p0, $block13
    
    set_red:
    $e15 = execute
    exec_at_entity $e15, $pos_util
    exec_run $e15, :set_red0
    branch :end

    [function] set_red0:
    $block14 = block "red_wool"
    setblock $p0, $block14
    
    set_black:
    $e16 = execute
    exec_at_entity $e16, $pos_util
    exec_run $e16, :set_black0
    branch :end

    [function] set_black0:
    $block15 = block "black_wool"
    setblock $p0, $block15
    
    end:
    ret
}


function draw_shape {

    preamble {
        $rel2 = rel_pos 2
        $relm2 = rel_pos -2
        $relm1 = rel_pos -1
    }

    entry:
    invoke @display_seek, ($row, $offset), NULL
    rangebr $shape_id, 0, 0, :shape_i, NULL
    rangebr $shape_id, 1, 1, :shape_l, NULL
    rangebr $shape_id, 2, 2, :shape_o, NULL
    rangebr $shape_id, 3, 3, :shape_t, NULL
    rangebr $shape_id, 4, 4, :shape_s, NULL
    rangebr $shape_id, 5, 5, :shape_z, NULL
    rangebr $shape_id, 6, 6, :shape_j, NULL
    ret
    
    [function] shape_i:
    rangebr $rotation, 0, 0, :shape_i_0, NULL
    rangebr $rotation, 1, 1, :shape_i_1, NULL
    rangebr $rotation, 2, 2, :shape_i_2, NULL
    rangebr $rotation, 3, 3, :shape_i_3, NULL

    [function] shape_i_0:
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL

    [function] shape_i_1:
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL

    [function] shape_i_2:
    call :move_2_0_0
    call :shape_i_0
    
    [function] shape_i_3:
    call :move_0_0_2
    call :shape_i_1

    [function] shape_l:
    rangebr $rotation, 0, 0, :shape_l_0, NULL
    rangebr $rotation, 1, 1, :shape_l_1, NULL
    rangebr $rotation, 2, 2, :shape_l_2, NULL
    rangebr $rotation, 3, 3, :shape_l_3, NULL
    
    [function] shape_l_0:
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL

    [function] shape_l_1:
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_m2_0_1
    invoke @set1, NULL, NULL

    [function] shape_l_2:
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL

    [function] shape_l_3:
    call :move_0_0_2
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_m1
    invoke @set1, NULL, NULL

    [function] shape_o:
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_m1
    invoke @set1, NULL, NULL

    [function] shape_t:
    rangebr $rotation, 0, 0, :shape_t_0, NULL
    rangebr $rotation, 1, 1, :shape_t_1, NULL
    rangebr $rotation, 2, 2, :shape_t_2, NULL
    rangebr $rotation, 3, 3, :shape_t_3, NULL

    [function] shape_t_0:
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_m1
    invoke @set1, NULL, NULL

    [function] shape_t_1:
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_m1_0_1
    invoke @set1, NULL, NULL

    [function] shape_t_2:
    call :move_2_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_m1_0_m1
    invoke @set1, NULL, NULL

    [function] shape_t_3:
    call :move_0_0_2
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_m1_0_m1
    invoke @set1, NULL, NULL

    [function] shape_s:
    rangebr $rotation, 0, 0, :shape_s_0, NULL
    rangebr $rotation, 1, 1, :shape_s_1, NULL
    rangebr $rotation, 2, 2, :shape_s_0, NULL
    rangebr $rotation, 3, 3, :shape_s_1, NULL

    [function] shape_s_0:
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL

    [function] shape_s_1:
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_m1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL

    [function] shape_z:
    rangebr $rotation, 0, 0, :shape_z_0, NULL
    rangebr $rotation, 1, 1, :shape_z_1, NULL
    rangebr $rotation, 2, 2, :shape_z_0, NULL
    rangebr $rotation, 3, 3, :shape_z_1, NULL

    [function] shape_z_0:
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_m1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL

    [function] shape_z_1:
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL

    [function] shape_j:
    rangebr $rotation, 0, 0, :shape_j_0, NULL
    rangebr $rotation, 1, 1, :shape_j_1, NULL
    rangebr $rotation, 2, 2, :shape_j_2, NULL
    rangebr $rotation, 3, 3, :shape_j_3, NULL

    [function] shape_j_0:
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_m1_0_0
    invoke @set1, NULL, NULL

    [function] shape_j_1:
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL

    [function] shape_j_2:
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_m1_0_1
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL

    [function] shape_j_3:
    call :move_0_0_1
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_1_0_0
    invoke @set1, NULL, NULL
    call :move_0_0_1
    invoke @set1, NULL, NULL
    
    [function] move_0_0_1:
    $e0 = execute
    exec_at_entity $e0, $pos_util
    exec_run $e0, :tp_0_0_1

    [function] move_1_0_0:
    $e1 = execute
    exec_at_entity $e1, $pos_util
    exec_run $e1, :tp_1_0_0

    [function] move_2_0_0:
    $e2 = execute
    exec_at_entity $e2, $pos_util
    exec_run $e2, :tp_2_0_0

    [function] move_0_0_2:
    $e3 = execute
    exec_at_entity $e3, $pos_util
    exec_run $e3, :tp_0_0_2

    [function] move_m2_0_1:
    $e4 = execute
    exec_at_entity $e4, $pos_util
    exec_run $e4, :tp_m2_0_1

    [function] move_0_0_m1:
    $e5 = execute
    exec_at_entity $e5, $pos_util
    exec_run $e5, :tp_0_0_m1

    [function] move_1_0_m1:
    $e6 = execute
    exec_at_entity $e6, $pos_util
    exec_run $e6, :tp_1_0_m1

    [function] move_m1_0_1:
    $e7 = execute
    exec_at_entity $e7, $pos_util
    exec_run $e7, :tp_m1_0_1

    [function] move_m1_0_m1:
    $e8 = execute
    exec_at_entity $e8, $pos_util
    exec_run $e8, :tp_m1_0_m1

    [function] move_m1_0_0:
    $e9 = execute
    exec_at_entity $e9, $pos_util
    exec_run $e9, :tp_m1_0_0
    
    [function] tp_0_0_1:
    $pos0 = position $rel0, $rel0, $rel1
    teleport $pos_util, $pos0

    [function] tp_1_0_0:
    $pos1 = position $rel1, $rel0, $rel0
    teleport $pos_util, $pos1

    [function] tp_2_0_0:
    $pos2 = position $rel2, $rel0, $rel0
    teleport $pos_util, $pos2

    [function] tp_0_0_2:
    $pos3 = position $rel0, $rel0, $rel2
    teleport $pos_util, $pos3

    [function] tp_m2_0_1:
    $pos4 = position $relm2, $rel0, $rel1
    teleport $pos_util, $pos4

    [function] tp_0_0_m1:
    $pos5 = position $rel0, $rel0, $relm1
    teleport $pos_util, $pos5

    [function] tp_1_0_m1:
    $pos6 = position $rel1, $rel0, $relm1
    teleport $pos_util, $pos6

    [function] tp_m1_0_1:
    $pos7 = position $relm1, $rel0, $rel1
    teleport $pos_util, $pos7

    [function] tp_m1_0_m1:
    $pos8 = position $relm1, $rel0, $relm1
    teleport $pos_util, $pos8

    [function] tp_m1_0_0:
    $pos9 = position $relm1, $rel0, $rel0
    teleport $pos_util, $pos9
}


function can_shape_fit_next {

    preamble {
        $tmp0 = define i32
        $ret = return i32
    }

    entry:
    $tmp0 = $row
    $tmp0 += $height
    rangebr $tmp0, 20, NULL, :ret0, :draw

    ret0:
    $ret = 0
    ret
    
    draw:
    $mode = 1
    $can_fit = 1
    $row += 1
    invoke @draw_shape, NULL, NULL
    $row -= 1
    $mode = 0
    $ret = $can_fit
    ret
}

function next_random {
    
    preamble {
        $tmp0 = define i32
        $tmp1 = define i32
        $tmp2 = define i32
    }
    
    entry:
    $tmp1 = 9
    $tmp0 = $random
    $tmp0 *= $tmp1
    $tmp2 = $random
    $tmp1 = 11
    $tmp2 %= $tmp1
    $tmp0 += $tmp2
    $random = $tmp0
    $tmp1 = 3
    $random /= $tmp1
    $tmp0 = 0
    $tmp0 -= $random
    $random > $tmp0
    $random += $row
    $random += $offset
    ret
    
}

function new_shape {
    
    preamble {
        $one = nbt_val int, 1
        $two = nbt_val int, 2
        $three = nbt_val int, 3
        $four = nbt_val int, 4
        $nine = nbt_val int, 9
        $ten = nbt_val int, 10
        $thirteen = nbt_val int, 13
        $fourteen = nbt_val int, 14
        $eleven = nbt_val int, 11
        
        $shape_heights = define nbt
        $shape_width = define nbt
        $shape_colors = define nbt
        
        $tmp0 = define i32
    }
    
    entry:
    $shape_heights_arr = nbt_list int
    $shape_width_arr = nbt_list int
    $shape_colors_arr = nbt_list int

    nbt_list_append $shape_heights_arr, $four
    nbt_list_append $shape_heights_arr, $three
    nbt_list_append $shape_heights_arr, $two
    nbt_list_append $shape_heights_arr, $three
    nbt_list_append $shape_heights_arr, $three
    nbt_list_append $shape_heights_arr, $three
    nbt_list_append $shape_heights_arr, $three
    
    nbt_list_append $shape_width_arr, $one
    nbt_list_append $shape_width_arr, $two
    nbt_list_append $shape_width_arr, $two
    nbt_list_append $shape_width_arr, $two
    nbt_list_append $shape_width_arr, $two
    nbt_list_append $shape_width_arr, $two
    nbt_list_append $shape_width_arr, $two
    
    nbt_list_append $shape_colors_arr, $nine
    nbt_list_append $shape_colors_arr, $one
    nbt_list_append $shape_colors_arr, $four
    nbt_list_append $shape_colors_arr, $ten
    nbt_list_append $shape_colors_arr, $thirteen
    nbt_list_append $shape_colors_arr, $fourteen
    nbt_list_append $shape_colors_arr, $eleven
    
    nbt_assign $shape_heights, $shape_heights_arr
    nbt_assign $shape_width, $shape_width_arr
    nbt_assign $shape_colors, $shape_colors_arr
    
    invoke @next_random, NULL, NULL
    $shape_id = $random
    $tmp0 = 7
    $shape_id %= $tmp0
    invoke @array_get, ($shape_heights, $shape_id), ($height)
    invoke @array_get, ($shape_width, $shape_id), ($width)
    invoke @array_get, ($shape_colors, $shape_id), ($color)
    
    $row = 0
    $offset = 5
    $rotation = 0
    ret
}

function array_get {

    preamble {
        $arr = parameter nbt, byval
        $indexparam = parameter i32, byval
        $value = return i32
        $index = define i32
    }

    entry:
    $index = $indexparam
    call :get_0_7
    ret

    [function] get_0_0:
    $value0 = nbtsubpath $arr, "[0]", i32
    $value = $value0

    [function] get_1_1:
    $value1 = nbtsubpath $arr, "[1]", i32
    $value = $value1

    [function] get_2_2:
    $value2 = nbtsubpath $arr, "[2]", i32
    $value = $value2

    [function] get_3_3:
    $value3 = nbtsubpath $arr, "[3]", i32
    $value = $value3

    [function] get_4_4:
    $value4 = nbtsubpath $arr, "[4]", i32
    $value = $value4

    [function] get_5_5:
    $value5 = nbtsubpath $arr, "[5]", i32
    $value = $value5

    [function] get_6_6:
    $value6 = nbtsubpath $arr, "[6]", i32
    $value = $value6

    [function] get_7_7:
    $value7 = nbtsubpath $arr, "[7]", i32
    $value = $value7

    [function] get_0_1:
    rangebr $index, 0, 0, :get_0_0, NULL
    rangebr $index, 1, 1, :get_1_1, NULL

    [function] get_2_3:
    rangebr $index, 2, 2, :get_2_2, NULL
    rangebr $index, 3, 3, :get_3_3, NULL

    [function] get_4_5:
    rangebr $index, 4, 4, :get_4_4, NULL
    rangebr $index, 5, 5, :get_5_5, NULL

    [function] get_6_7:
    rangebr $index, 6, 6, :get_6_6, NULL
    rangebr $index, 7, 7, :get_7_7, NULL

    [function] get_0_3:
    rangebr $index, 0, 1, :get_0_1, NULL
    rangebr $index, 2, 3, :get_2_3, NULL

    [function] get_4_7:
    rangebr $index, 4, 5, :get_4_5, NULL
    rangebr $index, 6, 7, :get_6_7, NULL

    [function] get_0_7:
    rangebr $index, 0, 3, :get_0_3, NULL
    rangebr $index, 4, 7, :get_4_7, NULL

}

function clear_line {

    preamble {
        $shift = define i32
        $tmp0 = define i32
        $relm1 = rel_pos -1
        $relm10 = rel_pos -10
    }
    
    entry:
    branch :loop

    loop:
    $e1 = execute
    exec_at_entity $e1, $pos_util
    exec_run $e1, :seek
    $shift += 1
    $tmp0 = 20
    $tmp0 -= $row
    $tmp0 -= $shift
    rangebr $tmp0, 1, NULL, :loop, :decrement
    
    decrement:
    $tmp0 = $shift
    $shift -= 1
    rangebr $tmp0, 0, 0, :end, :seek_return
    
    [function] seek:
    $src0 = position $rel0, $rel0, $relm1
    $src1 = position $relm10, $rel0, $relm1
    $dest = position $relm10, $rel0, $rel0
    clone $src0, $src1, $dest
    $pos0 = position $rel0, $rel0, $relm1
    teleport $pos_util, $pos0
    
    seek_return:
    $e2 = execute
    exec_at_entity $e2, $pos_util
    exec_run $e2, :tp1
    branch :decrement
    
    [function] tp1:
    $pos1 = position $rel0, $rel0, $rel1
    teleport $pos_util, $pos1
    
    end:
    ret
}

function check_line {

    preamble {
        $i = define i32
        $j = define i32
        $tmp0 = define i32
        $has_black = define i32
    }

    entry:
    invoke @display_seek, ($row, 0), NULL
    $i = 0
    branch :loop0
    
    loop0:
    $tmp0 = $height
    $tmp0 -= $i
    rangebr $tmp0, 1, NULL, :inner0, :end
    
    inner0:
    $has_black = 0
    $j = 0
    branch :loop1
    
    loop1:
    rangebr $j, NULL, 9, :inner1, :inner_end
    
    inner1:
    $e = execute
    exec_at_entity $e, $pos_util
    $spec = exec_store_var $tmp0
    exec_store $e, success, $spec
    $pos = position $rel0, $rel0, $rel0
    $black = block "black_wool"
    exec_if_block $e, $pos, $black
    exec_finish $e
    rangebr $tmp0, 0, 0, :cont, :setblack
    
    setblack:
    $has_black = 1
    branch :cont
    
    cont:
    $e2 = execute
    exec_at_entity $e2, $pos_util
    exec_run $e2, :tp0
    $j += 1
    branch :loop1
    
    [function] tp0:
    $pos0 = position $rel1, $rel0, $rel0
    teleport $pos_util, $pos0

    inner_end:
    rangebr $has_black, 0, 0, @clear_line, NULL
    $e3 = execute
    exec_at_entity $e3, $pos_util
    exec_run $e3, :tp1
    $i += 1
    branch :loop0
    
    [function] tp1:
    $x = rel_pos -10
    $pos1 = position $x, $rel0, $rel1
    teleport $pos_util, $pos1
    
    end:
    ret
}

function tick {

    preamble {
        $old_color = define i32
        $tmp0 = define i32
        $four = define i32
    }

    entry:
    $old_color = $color
    $color = 15
    invoke @draw_shape, NULL, NULL
    $color = $old_color
    invoke @can_shape_fit_next, NULL, ($tmp0)
    rangebr $tmp0, 0, 0, :cant_fit, :can_fit0

    cant_fit:
    invoke @draw_shape, NULL, NULL
    invoke @check_line, NULL, NULL
    invoke @new_shape, NULL, NULL
    branch :draw

    can_fit0:
    $row += 1
    
    $powbutton = block "stone_button"
    add_block_prop $powbutton, powered, "true"
    $unpowbutton = block "stone_button"
    add_block_prop $unpowbutton, powered, "false"
    add_block_prop $unpowbutton, face, "floor"
    
    $e0 = execute
    $spec = exec_store_var $tmp0
    exec_store $e0, success, $spec
    exec_if_block $e0, $rotatepos, $powbutton
    exec_finish $e0
    rangebr $tmp0, 0, 0, :check_left, :rotate

    check_left:
    $e1 = execute
    exec_store $e1, success, $spec
    exec_if_block $e1, $leftpos, $powbutton
    exec_finish $e1
    rangebr $tmp0, 0, 0, :check_right, :left

    check_right:
    $e2 = execute
    exec_store $e2, success, $spec
    exec_if_block $e2, $rightpos, $powbutton
    exec_finish $e2
    rangebr $tmp0, 0, 0, :draw, :right

    rotate:
    setblock $rotatepos, $unpowbutton
    $tmp0 = $rotation
    $tmp0 += 1
    $four = 4
    $tmp0 %= $four
    $rotation = $tmp0
    branch :check_left

    left:
    setblock $leftpos, $unpowbutton
    rangebr $offset, 1, NULL, :suboff, :check_right
    suboff:
    $offset -= 1
    branch :check_right

    right:
    setblock $rightpos, $unpowbutton
    rangebr $offset, NULL, 9, :addoff, :draw
    addoff:
    $offset += 1
    branch :draw

    draw:
    invoke @draw_shape, NULL, NULL
    ret
}


function main {
    
    preamble {
        $i = define i32
        $j = define i32
        
        $tmp0 = define i32
        
        extern
    }

    entry:
    $row = 0
    $height = 0
    $shape_id = 0
    $offset = 0
    $color = 0
    teleport $pos_util, $startpos
    $i = 0
    branch :for_1

    while:
    $e4 = execute
    $lever = block "lever"
    add_block_prop $lever, powered, "true"
    $spec = exec_store_var $tmp0
    exec_store $e4, success, $spec
    exec_if_block $e4, $leverpos, $lever
    exec_finish $e4
    rangebr $tmp0, 0, 0, :end, :loop
    
    loop:
    set_command_block :yield_trampoline
    
    yield_trampoline:
    clear_command_block
    invoke @tick, NULL, NULL
    branch :while

    for_1:
    rangebr $i, NULL, 19, :inner_for, :cont1
    
    cont1:
    invoke @new_shape, NULL, NULL
    invoke @draw_shape, NULL, NULL
    branch :while
    
    inner_for:
    $j = 0
    branch :for_2
    
    for_2:
    rangebr $j, NULL, 9, :inner_for_2, :for_2_end

    inner_for_2:
    $e = execute
    exec_at_entity $e, $pos_util
    exec_run $e, :set
    $e2 = execute
    exec_at_entity $e2, $pos_util
    exec_run $e2, :tp0
    $j += 1
    branch :for_2
    
    for_2_end:
    $x = rel_pos -10
    $e3 = execute
    exec_at_entity $e3, $pos_util
    exec_run $e3, :tp1
    $i += 1
    branch :for_1
    
    [function] set:
    $pos = position $rel0, $rel0, $rel0
    $block = block "black_wool"
    setblock $pos, $block
    
    [function] tp0:
    $pos1 = position $rel1, $rel0, $rel0
    teleport $pos_util, $pos1
    
    [function] tp1:
    $pos2 = position $x, $rel0, $rel1
    teleport $pos_util, $pos2
    
    end:
    ret

}